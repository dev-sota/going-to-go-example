// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	apperror "github.com/ispec-inc/going-to-go-example/pkg/apperror"
	model "github.com/ispec-inc/going-to-go-example/pkg/domain/model"
	reflect "reflect"
)

// MockUser is a mock of User interface
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockUser) Find(id int64) (model.User, apperror.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(apperror.Error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockUserMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUser)(nil).Find), id)
}

// Create mocks base method
func (m *MockUser) Create(mu model.User) (model.User, apperror.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", mu)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(apperror.Error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockUserMockRecorder) Create(mu interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUser)(nil).Create), mu)
}
